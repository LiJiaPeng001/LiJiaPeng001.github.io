import{_ as l,o as i,c as t,b as a}from"./app.911c061f.js";const u=JSON.parse('{"title":"React","description":"","frontmatter":{"layout":"doc","title":"React"},"headers":[{"level":2,"title":"React 相关理解","slug":"react-相关理解","link":"#react-相关理解","children":[]},{"level":2,"title":"VDOM 和 DOM 的区别","slug":"vdom-和-dom-的区别","link":"#vdom-和-dom-的区别","children":[{"level":3,"title":"两者优缺点","slug":"两者优缺点","link":"#两者优缺点","children":[]}]},{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]}],"relativePath":"interview/react.md"}'),r={name:"interview/react.md"};function d(n,e,c,o,h,p){return i(),t("div",null,e[0]||(e[0]=[a('<h1 id="react-相关基础" tabindex="-1">React 相关基础 <a class="header-anchor" href="#react-相关基础" aria-hidden="true">#</a></h1><h2 id="react-相关理解" tabindex="-1">React 相关理解 <a class="header-anchor" href="#react-相关理解" aria-hidden="true">#</a></h2><p>React 是一个用于构建用户界面的 JavaScript 库，只提供了 UI 层面的解决方案。有以下特性</p><ul><li>组件化：将界面成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，构成整体页面，提高代码的复用率和开发效率。</li><li>数据驱动试图 （setState）</li><li>JSX 语法：用于声明组件结构，是一个 JavaScript 的语法扩展。</li><li>单向数据绑定：从高阶组件到低阶组件的单向数据流，单向响应的数据流会比双向绑定的更安全，速度更快</li></ul><h2 id="vdom-和-dom-的区别" tabindex="-1">VDOM 和 DOM 的区别 <a class="header-anchor" href="#vdom-和-dom-的区别" aria-hidden="true">#</a></h2><ul><li>真实 DOM 存在重排和重绘，虚拟 DOM 不存在；</li><li>虚拟 DOM 的总损耗是“虚拟 DOM 增删改+真实 DOM 差异增删改+排版与重绘（可能比直接操作真实 DOM 要少）”，真实 DOM 的总损耗是“真实 DOM 完全增删改+排版与重绘”</li></ul><h3 id="两者优缺点" tabindex="-1">两者优缺点 <a class="header-anchor" href="#两者优缺点" aria-hidden="true">#</a></h3><p>真实 Dom</p><ul><li>易用</li><li>效率低，解析速度慢，内存占用量过高</li><li>性能差：频繁操作真实 DOM，易于导致重绘与回流</li></ul><p>虚拟 Dom</p><ul><li>简单方便：如果使用手动操作真实 DOM 来完成页面，繁琐又容易出错，在大规模应用下维护起来也很困难</li><li>性能方面：使用 Virtual DOM，能够有效避免真实 DOM 数频繁更新，减少多次引起重绘与回流，提高性能</li><li>跨平台：React 借助虚拟 DOM，带来了跨平台的能力，一套代码多端运行</li><li>在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化，首次渲染大量 DOM 时，由于多了一层虚拟 DOM 的计算，速度比正常稍慢</li></ul><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-hidden="true">#</a></h2><p>当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</p><ul><li>constructor()</li><li>static getDerivedStateFromProps()</li><li>render()</li><li>componentDidMount()</li></ul><p>更新</p><ul><li>shouldComponentUpdate()</li><li>render()</li><li>getSnapshotBeforeUpdate()</li><li>componentDidUpdate()</li></ul><p>卸载</p><ul><li>componentWillUnmount()</li></ul><p>错误处理</p><ul><li>componentDidCatch()：打印错误信息</li></ul>',20)]))}const D=l(r,[["render",d]]);export{u as __pageData,D as default};
