import{_ as a,o as n,c as l,b as e}from"./app.911c061f.js";const F=JSON.parse('{"title":"Vue","description":"","frontmatter":{"layout":"doc","title":"Vue"},"headers":[{"level":2,"title":"编译器原理","slug":"编译器原理","link":"#编译器原理","children":[]},{"level":2,"title":"vue2 与 vue3 区别","slug":"vue2-与-vue3-区别","link":"#vue2-与-vue3-区别","children":[]},{"level":2,"title":"Diff 算法","slug":"diff-算法","link":"#diff-算法","children":[{"level":3,"title":"v-for key 属性的意义","slug":"v-for-key-属性的意义","link":"#v-for-key-属性的意义","children":[]}]},{"level":2,"title":"路由钩子","slug":"路由钩子","link":"#路由钩子","children":[]},{"level":2,"title":"路由模式 hash history","slug":"路由模式-hash-history","link":"#路由模式-hash-history","children":[]},{"level":2,"title":"简述 Vue 的生命周期","slug":"简述-vue-的生命周期","link":"#简述-vue-的生命周期","children":[]},{"level":2,"title":"Vue2 computed 和 watch 的区别和运用的场景","slug":"vue2-computed-和-watch-的区别和运用的场景","link":"#vue2-computed-和-watch-的区别和运用的场景","children":[]},{"level":2,"title":"vue3 相关 API","slug":"vue3-相关-api","link":"#vue3-相关-api","children":[]},{"level":2,"title":"vue中v-for和v-if的优先级","slug":"vue中v-for和v-if的优先级","link":"#vue中v-for和v-if的优先级","children":[]}],"relativePath":"interview/vue.md"}'),p={name:"interview/vue.md"};function o(t,s,r,c,i,y){return n(),l("div",null,s[0]||(s[0]=[e(`<h1 id="vue-相关基础" tabindex="-1">VUE 相关基础 <a class="header-anchor" href="#vue-相关基础" aria-hidden="true">#</a></h1><h2 id="编译器原理" tabindex="-1">编译器原理 <a class="header-anchor" href="#编译器原理" aria-hidden="true">#</a></h2><h2 id="vue2-与-vue3-区别" tabindex="-1">vue2 与 vue3 区别 <a class="header-anchor" href="#vue2-与-vue3-区别" aria-hidden="true">#</a></h2><ul><li>vue2 依赖 Object.defineProperty 实现，只能监听指定对象的指定属性的 getter 和 setter 行为，比如声明对象 person 增加了一个新的属性就会失去响应式，Vue 提供$set 来增加响应式</li><li>vue3 引入反射和代理的概念，反射是 Reflect 代理是指 Proxy，利用 Proxy 直接代理一个普通对象，这个过程在 vue3 中通过 reactive 这个方法进行实现</li><li>proxy 只能代理复杂数据类型，所以 vue 额外实现了 ref 方法处理简单数据类型，通过 set 和 get 标记了 value 函数以此来实现，所以 ref 只能使用.value 进行触发</li><li>编译器原理 parse =》 transformer =〉 generate</li></ul><h2 id="diff-算法" tabindex="-1">Diff 算法 <a class="header-anchor" href="#diff-算法" aria-hidden="true">#</a></h2><blockquote><p>diff 算法本质是一个对比的方法，其核心在于：旧 Dom 组更新为新 Dom 组时，如何更新效率更高，想要触发 diff 必须时一组 dom 的变化</p></blockquote><h3 id="v-for-key-属性的意义" tabindex="-1">v-for key 属性的意义 <a class="header-anchor" href="#v-for-key-属性的意义" aria-hidden="true">#</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 根据 key || type 判断是否为相同类型节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">isSameVNodeType</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">n1</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">n2</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#89DDFF;">):</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">n1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">n2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">n1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">n2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>isSameVNodeType 的作用是判断两个 vnode 是否是相同的</li><li>判断的方式是利用 VNode 的 type 和 key 进行对比，如果两个 Vnode 的 type、key 相等，则两个 vnode 为相同的 vnode</li><li>type 是 Vnode 节点类型，比如 div、li、comment、Component 组件实例</li><li>key 就是 v-for 循环时绑定的 key，key 变化则判断两者是否相同</li></ul><h2 id="路由钩子" tabindex="-1">路由钩子 <a class="header-anchor" href="#路由钩子" aria-hidden="true">#</a></h2><ul><li>全局守卫 beforeEach afterEach</li><li>beforeEnter 只在进入路由时触发，不会在 params、query 或 hash 改变时触发</li><li>组件路由 beforeRouteEnter beforeRouteUpdate beforeRouteLeave</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> UserDetails </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">beforeRouteEnter</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">from</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在渲染该组件的对应路由被验证前调用</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 不能获取组件实例 \`this\` ！</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 因为当守卫执行时，组件实例还没被创建！</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">beforeRouteUpdate</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">from</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在当前路由改变，但是该组件被复用时调用</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 举例来说，对于一个带有动态参数的路径 \`/users/:id\`，在 \`/users/1\` 和 \`/users/2\` 之间跳转的时候，</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 由于会渲染同样的 \`UserDetails\` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 \`this\`</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">beforeRouteLeave</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">from</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在导航离开渲染该组件的对应路由时调用</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 与 \`beforeRouteUpdate\` 一样，它可以访问组件实例 \`this\`</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="路由模式-hash-history" tabindex="-1">路由模式 hash history <a class="header-anchor" href="#路由模式-hash-history" aria-hidden="true">#</a></h2><p><code>hash</code>模式是一种把前端路由的路径用井号 <code>#</code> 拼接在真实 <code>url</code> 后面的模式。当井号 <code>#</code> 后面的路径发生变化时，浏览器并不会重新发起请求，而是会触发 <code>onhashchange</code> 事件。</p><ul><li>hash 变化会触发网页跳转，即浏览器的前进和后退。</li><li>hash 可以改变 url ，但是不会触发页面重新加载（hash 的改变是记录在 window.history 中），即不会刷新页面。也就是说，所有页面的跳转都是在客户端进行操作。因此，这并不算是一次 http 请求，所以这种模式不利于 SEO 优化。hash 只能修改 # 后面的部分，所以只能跳转到与当前 url 同文档的 url.</li><li>hash 通过 window.onhashchange 的方式，来监听 hash 的改变，借此实现无刷新跳转的功能。</li></ul><p><code>history API</code> 是 H5 提供的新特性，允许开发者直接更改前端路由，即更新浏览器 URL 地址而不重新发起请求。</p><ul><li>通过 <code>pushState</code> 、 <code>replaceState</code> 来实现无刷新跳转的功能。</li><li>使用 history 模式时，在对当前的页面进行刷新时，此时浏览器会重新发起请求。如果 <code>nginx</code> 没有匹配得到当前的 url ，就会出现 404 的页面。</li><li><code>hash</code> 模式虽然改变了 <code>url</code> 但并不包括在 http 请求中不影响服务端</li><li>通过 js 操作 window.history 来改变浏览器地址栏的路径并没有发送 http 请求，当页面刷新会请求 <a href="http://www.website.com/login,%E8%BF%99%E4%B8%AA%E7%9B%AE%E5%BD%95%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%89%80%E4%BB%A5%E4%BC%9A%E8%BF%94%E5%9B%9E404" target="_blank" rel="noreferrer">www.website.com/login,这个目录在服务器并不存在所以会返回404</a></li></ul><h4 id="两者比较" tabindex="-1">两者比较 <a class="header-anchor" href="#两者比较" aria-hidden="true">#</a></h4><ul><li><code>to B</code> 的系统推荐用 hash ，相对简单且容易使用，且因为 hash 对 url 规范不敏感；</li><li><code>to C</code> 的系统，可以考虑选择 H5 history ，但是需要服务端支持；</li></ul><h2 id="简述-vue-的生命周期" tabindex="-1">简述 Vue 的生命周期 <a class="header-anchor" href="#简述-vue-的生命周期" aria-hidden="true">#</a></h2><ul><li>beforeCreate（创建前） ：数据观测和初始化事件还未开始，此时 data 的响应式追踪、event/watcher 都还没有被设置，也就是说不能访问到 data、computed、watch、methods 上的方法和数据。</li><li>created（创建后） ：实例创建完成，实例上配置的 options 包括 data、computed、watch、methods 等都配置完成，但是此时渲染得节点还未挂载到 DOM，所以不能访问到 <code>$el</code> 属性。</li><li>beforeMount（挂载前） ：在挂载开始之前被调用，相关的 render 函数首次被调用。实例已完成以下的配置：编译模板，把 data 里面的数据和模板生成 html。此时还没有挂载 html 到页面上。</li><li>mounted（挂载后） ：在 el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的 html 内容替换 el 属性指向的 DOM 对象。完成模板中的 html 渲染到 html 页面中。此过程中进行 ajax 交互。</li><li>beforeUpdate（更新前） ：响应式数据更新时调用，此时虽然响应式数据更新了，但是对应的真实 DOM 还没有被渲染。</li><li>updated（更新后）：在由于数据更改导致的虚拟 DOM 重新渲染和打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。调用时，组件 DOM 已经更新，所以可以执行依赖于 DOM 的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</li><li>beforeDestroy（销毁前） ：实例销毁之前调用。这一步，实例仍然完全可用，<code>this</code> 仍能获取到实例。</li><li>destroyed（销毁后） ：实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务端渲染期间不被调用。 另外还有 <code>keep-alive</code> 独有的生命周期，分别为 <code>activated</code> 和 <code>deactivated</code> 。用 <code>keep-alive</code> 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 <code>deactivated</code> 钩子函数，命中缓存渲染后会执行 <code>activated</code> 钩子函数。</li></ul><h4 id="加载渲染过程" tabindex="-1">加载渲染过程 <a class="header-anchor" href="#加载渲染过程" aria-hidden="true">#</a></h4><p>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p><h4 id="子组件更新过程" tabindex="-1">子组件更新过程 <a class="header-anchor" href="#子组件更新过程" aria-hidden="true">#</a></h4><p>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updaed -&gt; 父 updated</p><h4 id="销毁过程" tabindex="-1">销毁过程 <a class="header-anchor" href="#销毁过程" aria-hidden="true">#</a></h4><p>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt;父 destroyed</p><h2 id="vue2-computed-和-watch-的区别和运用的场景" tabindex="-1">Vue2 computed 和 watch 的区别和运用的场景 <a class="header-anchor" href="#vue2-computed-和-watch-的区别和运用的场景" aria-hidden="true">#</a></h2><ul><li>功能上：computed 是计算属性，watch 是监听一个值的变化，然后执行对应的回调。</li><li>是否调用缓存：computed 中的函数所依赖的属性没有发生变化，那么调用当前的函数的时候会从缓存中读取，而 watch 在每次监听的值发生变化的时候都会执行回调。</li><li>是否调用 return：computed 中的函数必须要用 return 返回，watch 中的函数不是必须要用 return</li><li>computed 默认第一次加载的时候就开始监听；watch 默认第一次加载不做监听，如果需要第一次加载做监听，添加 immediate 属性，设置为 true（immediate:true）</li><li>使用场景：computed----当一个属性受多个属性影响的时候，使用 computed-----用户名展示、列表展示、购物车商品结算。watch–当一条数据影响多条数据的时候，使用 watch-----搜索框</li></ul><h2 id="vue3-相关-api" tabindex="-1">vue3 相关 API <a class="header-anchor" href="#vue3-相关-api" aria-hidden="true">#</a></h2><ul><li>toRef 创建一个对应的 ref。这样创建的 ref 与其源属性保持同步：改变源属性的值将更新 ref 的值</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fooRef </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">toRef</span><span style="color:#BABED8;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 更改该 ref 会更新源属性</span></span>
<span class="line"><span style="color:#BABED8;">fooRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 更改源属性也会更新该 ref</span></span>
<span class="line"><span style="color:#BABED8;">state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(fooRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>toRefs 将一个响应式对象转换为一个普通对象，这个普通对象的每个属性都是指向源对象相应属性的 ref。每个单独的 ref 都是使用 toRef() 创建的。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> stateAsRefs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">toRefs</span><span style="color:#BABED8;">(state)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">stateAsRefs 的类型：{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  foo: Ref&lt;number&gt;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  bar: Ref&lt;number&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这个 ref 和源属性已经“链接上了”</span></span>
<span class="line"><span style="color:#BABED8;">state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(stateAsRefs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">stateAsRefs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">foo)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>shalowRef 和 ref() 不同，浅层 ref 的内部值将会原样存储和暴露，并且不会被深层递归地转为响应式。只有对 .value 的访问是响应式的。常常用于对大型数据结构的性能优化或是与外部的状态管理系统集成。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 不会触发更改</span></span>
<span class="line"><span style="color:#BABED8;">state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">count </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 会触发更改</span></span>
<span class="line"><span style="color:#BABED8;">state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="vue中v-for和v-if的优先级" tabindex="-1">vue中v-for和v-if的优先级 <a class="header-anchor" href="#vue中v-for和v-if的优先级" aria-hidden="true">#</a></h2><ul><li>在vue2中，v-for优先级高于v-if</li><li>vue3中，v-if优先级高于v-for</li></ul>`,38)]))}const d=a(p,[["render",o]]);export{F as __pageData,d as default};
