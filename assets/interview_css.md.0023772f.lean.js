import{_ as a,o as r,c as t,b as s}from"./app.911c061f.js";const p=JSON.parse('{"title":"CSS","description":"","frontmatter":{"layout":"doc","title":"CSS"},"headers":[{"level":2,"title":"伪类和伪元素","slug":"伪类和伪元素","link":"#伪类和伪元素","children":[]},{"level":2,"title":"em 和 rem","slug":"em-和-rem","link":"#em-和-rem","children":[]},{"level":2,"title":"⽤ translate 来改变位置⽽不是定位","slug":"用-translate-来改变位置而不是定位","link":"#用-translate-来改变位置而不是定位","children":[]}],"relativePath":"interview/css.md"}'),n={name:"interview/css.md"};function i(d,e,o,c,l,h){return r(),t("div",null,e[0]||(e[0]=[s('<h1 id="css-相关基础" tabindex="-1">CSS 相关基础 <a class="header-anchor" href="#css-相关基础" aria-hidden="true">#</a></h1><h2 id="伪类和伪元素" tabindex="-1">伪类和伪元素 <a class="header-anchor" href="#伪类和伪元素" aria-hidden="true">#</a></h2><p>伪类：通过单冒号展示，比如:hover 伪元素：通过双冒号展示，比如::before</p><h2 id="em-和-rem" tabindex="-1">em 和 rem <a class="header-anchor" href="#em-和-rem" aria-hidden="true">#</a></h2><p><code>em</code> 的值等于该元素的父级元素的计算字体大小</p><p><code>rem</code> 永远只相对于 <code>HTML</code> 节点的 <code>fontSize</code></p><h2 id="用-translate-来改变位置而不是定位" tabindex="-1">⽤ translate 来改变位置⽽不是定位 <a class="header-anchor" href="#用-translate-来改变位置而不是定位" aria-hidden="true">#</a></h2><p>translate 是 transform 属性的⼀个值。改变 transform 或 opacity 不会触发浏览器重排（reflow）或重绘（repaint），只会触发复合（compositions）。⽽改变绝对定位会触发重排，进⽽触发重绘和复合。</p>',8)]))}const f=a(n,[["render",i]]);export{p as __pageData,f as default};
