import{_ as i,o as t,c as l,b as a}from"./app.911c061f.js";const u=JSON.parse('{"title":"HTTP","description":"","frontmatter":{"layout":"doc","title":"HTTP"},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"常见状态码","slug":"常见状态码","link":"#常见状态码","children":[]},{"level":2,"title":"TCP/IP 协议","slug":"tcp-ip-协议","link":"#tcp-ip-协议","children":[]},{"level":2,"title":"GET 和 POST 的请求的区别","slug":"get-和-post-的请求的区别","link":"#get-和-post-的请求的区别","children":[]},{"level":2,"title":"在地址栏里输入一个地址回车会发生哪些事情","slug":"在地址栏里输入一个地址回车会发生哪些事情","link":"#在地址栏里输入一个地址回车会发生哪些事情","children":[]},{"level":2,"title":"HTTP 中的强缓存与协商缓存","slug":"http-中的强缓存与协商缓存","link":"#http-中的强缓存与协商缓存","children":[]}],"relativePath":"interview/http.md"}'),h={name:"interview/http.md"};function r(d,e,c,n,p,o){return t(),l("div",null,e[0]||(e[0]=[a('<h1 id="http-相关基础" tabindex="-1">HTTP 相关基础 <a class="header-anchor" href="#http-相关基础" aria-hidden="true">#</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-hidden="true">#</a></h2><p>HTTP是超本文协议</p><ul><li>超文本，文字图片视频的混合体</li><li>传输，双向协议，也就是赚额用来在两点之间传输数据的约定和规范</li><li>协议，使用计算机能够理解的语言确立了一种计算机之间交流通信的规范，以及相关的各种控制和错误处理方式</li></ul><p>在计算机世界里专门在两点之间传输文字、图片、视频、音频等超文本的数据的约定和规范</p><h2 id="常见状态码" tabindex="-1">常见状态码 <a class="header-anchor" href="#常见状态码" aria-hidden="true">#</a></h2><ul><li>1xx 协议处理的中间状态，需要后续操作</li><li>2xx 查询被正确处理</li><li>3xx 重定向</li><li>4xx 服务端错误</li><li>5xx 服务器错误</li></ul><h2 id="tcp-ip-协议" tabindex="-1">TCP/IP 协议 <a class="header-anchor" href="#tcp-ip-协议" aria-hidden="true">#</a></h2><p>TCP/IP 是一个通讯协议模型，TCP（网络控制协议）IP（网络协议）很重要的一点就是分层管理，依次为以下四层，应用层、传输层、网络层和数据链路层</p><ul><li>应用层是大多数是与网络相关的程序为了通过网络与其他程序通信所使用的层，比如 HTTP、FTP、SSH</li><li>传输层提供位于网络连接中的两台计算机之间的数据传输，一般会用到两个协议 TCP 和 UDP</li><li>网络层规定通过怎么样的路径到达对方的计算机也称为 IP 层，分为地址和路由，IP 地址也就是 IPv4 和 IPv6，IPv4 有 40 亿个节点，IPv6 有 2125 亿个节点</li><li>数据链路层用来处理连接网络中的硬件部分，比如操作系统和路由器等等</li></ul><h2 id="get-和-post-的请求的区别" tabindex="-1">GET 和 POST 的请求的区别 <a class="header-anchor" href="#get-和-post-的请求的区别" aria-hidden="true">#</a></h2><ul><li>浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存</li><li>参数长度限制不同，URL 长度限制为 2kb，post 没有限制</li><li>get 请求的数据会附加在 url 之 ，以 &quot; ？ &quot;分割 url 和传输数据，多个参数用 &quot;&amp;&quot;连接，而 post 请求会把请求的数据放在 http 请求体中。</li></ul><h2 id="在地址栏里输入一个地址回车会发生哪些事情" tabindex="-1">在地址栏里输入一个地址回车会发生哪些事情 <a class="header-anchor" href="#在地址栏里输入一个地址回车会发生哪些事情" aria-hidden="true">#</a></h2><ul><li>解析 URL： 首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径</li><li>缓存判断： 浏览器会判断所请求的资源是否在缓存里</li><li>DNS 解析： 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。</li><li>TCP 三次握手： ，确认客户端与服务器的接收与发送能力</li><li>HTTPS 握手： 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。</li><li>返回数据： 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</li><li>页面渲染</li><li>TCP 四次挥手： 最后一步是 TCP 断开连接的四次挥手过程。</li></ul><h2 id="http-中的强缓存与协商缓存" tabindex="-1">HTTP 中的强缓存与协商缓存 <a class="header-anchor" href="#http-中的强缓存与协商缓存" aria-hidden="true">#</a></h2><h4 id="强缓存分为expires-http1-0-规范-、-cache-control-http1-1-规范-两种。" tabindex="-1">强缓存分为<code>expires</code>（http1.0 规范）、 <code>cache-control</code>（http1.1 规范）两种。 <a class="header-anchor" href="#强缓存分为expires-http1-0-规范-、-cache-control-http1-1-规范-两种。" aria-hidden="true">#</a></h4><p>expires 是根据本地时间来判断的，假设客户端和服务器时间不同，会导致缓存命中误差</p><p>在 http1.1 规范中，提出了<code>cache-control</code>字段，且这个字段优先级高于上面提到的<code>Expires</code>，值是相对时间。</p><h4 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a></h4><p>协商缓存（也叫对比缓存）是由服务器来确定资源是否可用.</p>',20)]))}const P=i(h,[["render",r]]);export{u as __pageData,P as default};
